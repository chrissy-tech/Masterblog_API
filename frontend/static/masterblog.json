{
  "swagger": "2.0",
  "info": {
    "title": "Masterblog API",
    "version": "1.0.0",
    "description": "A RESTful API for managing blog posts, supporting CRUD operations, sorting, pagination, and searching."
  },
  "tags": [
    {
      "name": "Posts",
      "description": "Blog Post operations (CRUD, List, Search, Sort, Paginate)"
    }
  ],
  "paths": {
    "/api/posts": {
      "get": {
        "summary": "Retrieve, sort, and paginate blog posts",
        "description": "Returns a list of all posts. Supports optional sorting by title/content/author/date and pagination.",
        "produces": ["application/json"],
        "tags": ["Posts"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve (e.g., 1, 2, ...)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of posts per page (e.g., 5, 10)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field to sort by",
            "required": false,
            "type": "string",
            "enum": ["title", "content", "author", "date"]
          },
          {
            "name": "direction",
            "in": "query",
            "description": "Sort order",
            "required": false,
            "type": "string",
            "enum": ["asc", "desc"]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation, returns structured list.",
            "schema": {
              "$ref": "#/definitions/PaginatedPosts"
            }
          },
          "400": {
            "description": "Bad Request (e.g., invalid sort parameters or non-integer page values)"
          }
        }
      },
      "post": {
        "summary": "Create a new blog post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Posts"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Post object to be created. ID, author (default 'Anonymous'), and date are auto-generated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewPost"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Post created successfully",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "description": "Missing required fields (title, content)"
          }
        }
      }
    },
    "/api/posts/{id}": {
      "put": {
        "summary": "Update an existing post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Posts"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the post to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Post data to update (any field in Post except ID is optional)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post updated successfully",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "404": {
            "description": "Post not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a post by ID",
        "tags": ["Posts"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the post to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Post deleted successfully"
          },
          "404": {
            "description": "Post not found"
          }
        }
      }
    },
    "/api/posts/search": {
      "get": {
        "summary": "Search posts by query term across all fields",
        "produces": ["application/json"],
        "tags": ["Posts"],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Search term to look for in title, content, author, or date (case-insensitive)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful search operation",
            "schema": {
              "$ref": "#/definitions/SearchResults"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Post": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Unique Post ID (read-only)"
        },
        "title": {
          "type": "string",
          "description": "The title of the blog post"
        },
        "content": {
          "type": "string",
          "description": "The full content of the blog post"
        },
        "author": {
          "type": "string",
          "description": "The author of the post"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "Creation date (YYYY-MM-DD)"
        }
      },
      "required": ["id", "title", "content", "author", "date"]
    },
    "NewPost": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "content": {
          "type": "string"
        }
      },
      "required": ["title", "content"]
    },
    "UpdatePayload": {
      "type": "object",
      "description": "Payload for PUT request (all fields are optional)",
      "properties": {
        "title": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "author": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "PaginatedPosts": {
      "type": "object",
      "properties": {
        "total_posts": {
          "type": "integer"
        },
        "total_pages": {
          "type": "integer"
        },
        "current_page": {
          "type": "integer"
        },
        "per_page": {
          "type": "integer"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Post"
          }
        }
      }
    },
    "SearchResults": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Post"
          }
        }
      }
    }
  }
}
